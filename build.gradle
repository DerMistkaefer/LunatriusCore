buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = 'gradle plugins'
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.0.9'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.matthewprenger.cursegradle'

ext.build = System.getenv().BUILD_NUMBER ?: 'git'
ext.modversion = "${project.version_major}.${project.version_minor}.${project.version_micro}.${build}"

group = 'com.github.lunatrius'
version = "${project.version_minecraft}-${modversion}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'UTF-8'

minecraft {
    mappings channel: "snapshot", version: "${project.version_mappings}"

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.version_minecraft}-${project.version_forge}"
}
import org.apache.tools.ant.filters.ReplaceTokens

// this will ensure that this task is redone when the versions change.
processResources.outputs.upToDateWhen { false }
processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand([
                'modid'          : project.name,
                'version'        : modversion,
                'mcversion'      : project.version_minecraft,
                'forgeversion'   : project.version_forge,
                'minforgeversion': project.hasProperty('version_minforge') ? project.version_minforge : project.version_forge
        ])
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            exclude 'com/github/lunatrius/core/reference/Reference.java'
        }
    }
}

task generateSources(type: Copy) {
    from 'src/main/java/com/github/lunatrius/core/reference/Reference.java'
    into "$buildDir/generated-src/com/github/lunatrius/core/reference"
    filter(ReplaceTokens, tokens: [
            'version': modversion.toString(),
            'mcversion': project.version_minecraft,
            'forgeversion': project.version_forge,
    ])
}
// the following lines are important to wire the task in with the compileJava task
compileJava.source "$buildDir/generated-src"
compileJava.dependsOn generateSources

def commonManifest = {
    if (project.hasProperty('extra_fmlat')) {
        attributes 'FMLAT': project.extra_fmlat
    }
}

jar {
    classifier = project.hasProperty('extra_classifier') ? project.extra_classifier : 'universal'
    manifest commonManifest
}

artifacts {
    archives jar
}

if (!project.hasProperty('keystore_location'))
    ext.keystore_location = '.'

if (!project.hasProperty('keystore_alias'))
    ext.keystore_alias = ''

if (!project.hasProperty('keystore_password'))
    ext.keystore_password = ''

task signJars(dependsOn: ['reobfJar', 'sourceJar']) {
    inputs.dir jar.destinationDir
    inputs.file keystore_location
    inputs.property 'keystore_alias', keystore_alias
    inputs.property 'keystore_password', keystore_password
    outputs.dir jar.destinationDir

    onlyIf {
        return keystore_location != '.'
    }

    doLast {
        jar.destinationDir.eachFile { file ->
            if (!file.getPath().endsWith('.jar'))
                return;

            logger.lifecycle "signing ${file}"
            ant.signjar(
                    destDir: file.getParentFile(),
                    jar: file,
                    keystore: keystore_location,
                    alias: keystore_alias,
                    storepass: keystore_password
            )
        }
    }
}

if (!project.hasProperty('release_location'))
    ext.release_location = '.'
else
    ext.release_location = release_location.replace('{modid}', project.name).replace('{mcversion}', project.version_minecraft).replace('{version}', version)

task release(dependsOn: 'signJars', type: Copy) {
    from project.tasks.jar.destinationDir
    into project.file(project.release_location)

    eachFile { file ->
        logger.lifecycle "copying ${file}"
    }

    onlyIf {
        return project.release_location != '.'
    }
}

if (project.hasProperty('api_key_curseforge') && project.hasProperty('extra_curseforge_id')) {
    tasks.curseforge.dependsOn signJars
    curseforge {
        apiKey = project.api_key_curseforge

        project {
            id = project.extra_curseforge_id
            changelog = ''
            releaseType = project.hasProperty('extra_curseforge_releasetype') ? project.extra_curseforge_releasetype : 'release'

            addArtifact sourceJar
        }
    }
}
